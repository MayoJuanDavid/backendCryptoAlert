import { ENV } from '../constants';
import { SignerType } from '../types';
import { ChannelInfoOptions, ChannelSearchOptions, TagListOptions } from './PushNotificationTypes';
import { PushNotificationBaseClass } from './pushNotificationBase';
import { Channel } from './channel';
export declare class Tags extends PushNotificationBaseClass {
    private channel;
    constructor(channel: Channel, signer?: SignerType, env?: ENV, account?: string);
    /**
     * @description - Get delegates of a channell
     * @param {string} [options.channel] - channel in caip. defaults to account from signer with eth caip
     * @returns array of delegates
     */
    get: (options?: ChannelInfoOptions) => Promise<any>;
    /**
     * @description adds tags for a channel
     * @param {Array<string>} tags - tags to be added
     * @returns the tags if the transaction is successfull
     */
    add: (tags: Array<string>) => Promise<{
        tags: string[];
    }>;
    /**
     * @description update tags for a channel
     * @param {Array<string>} tags - tags to be added
     * @returns the tags if the transaction is successfull
     */
    update: (tags: Array<string>) => Promise<{
        tags: string[];
    }>;
    /**
     * @description removes tags from a channel
     * @returns status of the request
     */
    remove: () => Promise<{
        status: string;
    }>;
    /**
     * @description - returns relevant information as per the query that was passed
     * @param {string} query - search query
     * @param {number} [options.page] -  page number. default is set to Constants.PAGINATION.INITIAL_PAGE
     * @param {number} [options.limit] - number of feeds per page. default is set to Constants.PAGINATION.LIMIT
     * @returns Array of results relevant to the serach query
     */
    search: (query: string, options?: ChannelSearchOptions) => Promise<any>;
    list: (options?: TagListOptions) => Promise<any>;
}
