"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Alias = void 0;
const tslib_1 = require("tslib");
const config_1 = require("../config"), config = config_1;
const PUSH_ALIAS = require("../alias");
const pushNotificationBase_1 = require("./pushNotificationBase");
class Alias extends pushNotificationBase_1.PushNotificationBaseClass {
    constructor(signer, env, account) {
        super(signer, env, account);
        /**
         * @description - fetches alias information
         * @param {AliasOptions} options - options related to alias
         * @returns Alias details
         */
        this.info = (options) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield PUSH_ALIAS.getAliasInfo(Object.assign(Object.assign({}, options), { env: this.env }));
            }
            catch (error) {
                throw new Error(`Push SDK Error: API : alias::info : ${error}`);
            }
        });
        /**
         * @description adds an alias to the channel
         * @param {string} alias - alias address in caip to be added
         * @param {AliasInfoOptions} options - options related to alias
         * @returns the transaction hash if the transaction is successfull
         */
        this.initiate = (alias, options) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.checkSignerObjectExists();
                const networkDetails = yield this.getChainId(this.signer);
                const caip = `eip155:${networkDetails}`;
                if (!config_1.default[this.env][caip] || !config.VIEM_CONFIG[this.env][caip]) {
                    throw new Error('Unsupported Chainid');
                }
                const commAddress = config_1.default[this.env][caip].EPNS_COMMUNICATOR_CONTRACT;
                const commContract = this.createContractInstance(commAddress, config.ABIS.COMM, config.VIEM_CONFIG[this.env][caip].NETWORK);
                const addAliasRes = yield this.initiateAddAlias(commContract, alias);
                let resp = { tx: addAliasRes };
                if (options === null || options === void 0 ? void 0 : options.raw) {
                    resp = Object.assign(Object.assign({}, resp), { "raw": {
                            "initiateVerificationProof": addAliasRes
                        } });
                }
                return resp;
            }
            catch (error) {
                throw new Error(`Push SDK Error: Contract : alias::add : ${error}`);
            }
        });
        /**
        * @description verifies an alias address of a channel
        * @param {string} channelAddress - channelAddress to be verified
        * @param {AliasInfoOptions} options - options related to alias
        * @returns the transaction hash if the transaction is successfull
        */
        this.verify = (channelAddress, options) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.checkSignerObjectExists();
                const networkDetails = yield this.getChainId(this.signer);
                const caip = `eip155:${networkDetails}`;
                if (!config_1.default[this.env][caip] || !config.VIEM_CONFIG[this.env][caip]) {
                    throw new Error('Unsupported Chainid');
                }
                const commAddress = config_1.default[this.env][caip].EPNS_COMMUNICATOR_CONTRACT;
                const commContract = this.createContractInstance(commAddress, config.ABIS.COMM, config.VIEM_CONFIG[this.env][caip].NETWORK);
                const { verifyAliasRes, channelInfo } = yield this.verifyAlias(commContract, channelAddress);
                let resp = { tx: verifyAliasRes };
                if (options === null || options === void 0 ? void 0 : options.raw) {
                    resp = Object.assign(Object.assign({}, resp), { "raw": {
                            "initiateVerificationProof": channelInfo.initiate_verification_proof,
                            "verifyVerificationProof": verifyAliasRes
                        } });
                }
                return resp;
            }
            catch (error) {
                throw new Error(`Push SDK Error: Contract : alias::verify : ${error}`);
            }
        });
    }
}
exports.Alias = Alias;
//# sourceMappingURL=alias.js.map