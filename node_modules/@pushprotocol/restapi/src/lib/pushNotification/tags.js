"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tags = void 0;
const tslib_1 = require("tslib");
const constants_1 = require("../constants");
const PUSH_CHANNEL = require("../channels");
const pushNotificationBase_1 = require("./pushNotificationBase");
const constantsV2_1 = require("../constantsV2");
class Tags extends pushNotificationBase_1.PushNotificationBaseClass {
    constructor(channel, signer, env, account) {
        super(signer, env, account);
        /**
         * @description - Get delegates of a channell
         * @param {string} [options.channel] - channel in caip. defaults to account from signer with eth caip
         * @returns array of delegates
         */
        this.get = (options) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.checkSignerObjectExists();
                const channel = yield this.channel.info();
                return yield PUSH_CHANNEL.getTags({
                    channel: channel,
                    env: this.env,
                });
            }
            catch (error) {
                throw new Error(`Push SDK Error: API : tags::get : ${error}`);
            }
        });
        /**
         * @description adds tags for a channel
         * @param {Array<string>} tags - tags to be added
         * @returns the tags if the transaction is successfull
         */
        this.add = (tags) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.checkSignerObjectExists();
                const channel = yield this.channel.info();
                const resp = yield this.channel.update({
                    name: channel.name,
                    description: channel.info,
                    url: channel.url,
                    icon: channel.icon,
                    tags: tags,
                });
                return { tags };
            }
            catch (error) {
                throw new Error(`Push SDK Error: Contract : tags::add : ${error}`);
            }
        });
        /**
         * @description update tags for a channel
         * @param {Array<string>} tags - tags to be added
         * @returns the tags if the transaction is successfull
         */
        this.update = (tags) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.checkSignerObjectExists();
                const channel = yield this.channel.info();
                yield this.channel.update({
                    name: channel.name,
                    description: channel.info,
                    url: channel.url,
                    icon: channel.icon,
                    tags: tags,
                });
                return { tags };
            }
            catch (error) {
                throw new Error(`Push SDK Error: Contract : tags::update : ${error}`);
            }
        });
        /**
         * @description removes tags from a channel
         * @returns status of the request
         */
        this.remove = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.checkSignerObjectExists();
                const channel = yield this.channel.info();
                yield this.channel.update({
                    name: channel.name,
                    description: channel.info,
                    url: channel.url,
                    icon: channel.icon,
                    tags: [],
                });
                return { status: 'success' };
            }
            catch (error) {
                throw new Error(`Push SDK Error: Contract : tags::remove : ${error}`);
            }
        });
        /**
         * @description - returns relevant information as per the query that was passed
         * @param {string} query - search query
         * @param {number} [options.page] -  page number. default is set to Constants.PAGINATION.INITIAL_PAGE
         * @param {number} [options.limit] - number of feeds per page. default is set to Constants.PAGINATION.LIMIT
         * @returns Array of results relevant to the serach query
         */
        this.search = (query, options) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { page = constants_1.default.PAGINATION.INITIAL_PAGE, limit = constants_1.default.PAGINATION.LIMIT, } = options || {};
                return yield PUSH_CHANNEL.searchTags({
                    query: query,
                    page: page,
                    limit: limit,
                    env: this.env,
                });
            }
            catch (error) {
                throw new Error(`Push SDK Error: API : channel::tags::search : ${error}`);
            }
        });
        this.list = (options) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { page = constants_1.default.PAGINATION.INITIAL_PAGE, limit = constants_1.default.PAGINATION.LIMIT, order = constantsV2_1.default.FILTER.CHANNEL_LIST.ORDER.DESCENDING, filter = constantsV2_1.default.FILTER.TAGS.PUSH, } = options || {};
                return yield PUSH_CHANNEL.getAllTags({
                    page: page,
                    limit: limit,
                    order: order,
                    filter: filter,
                    env: this.env,
                });
            }
            catch (error) {
                throw new Error(`Push SDK Error: API : channel::tags::list : ${error}`);
            }
        });
        this.channel = channel;
    }
}
exports.Tags = Tags;
//# sourceMappingURL=tags.js.map