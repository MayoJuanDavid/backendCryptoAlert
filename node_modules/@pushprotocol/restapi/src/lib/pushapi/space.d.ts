import { ENV } from '../constants';
import { SignerType, ProgressHookType, SpaceInfoDTO, SpaceAccess, SpaceIFeeds, IFeeds, Message, MessageWithCID, IMessageIPFS, GroupParticipantCounts, SpaceMemberProfile } from '../types';
import { GetGroupParticipantsOptions, ManageSpaceOptions, RemoveFromSpaceOptions, SpaceCreationOptions, SpaceInitializeOptions, SpaceListType, SpaceParticipantStatus, SpaceQueryOptions, SpaceUpdateOptions } from './pushAPITypes';
import { SpaceV2 } from '../space/SpaceV2';
export declare class Space {
    private account;
    private env;
    private decryptedPgpPvtKey?;
    private signer?;
    private progressHook?;
    private chatInstance;
    constructor(account: string, env: ENV, decryptedPgpPvtKey?: string | undefined, signer?: SignerType | undefined, progressHook?: ((progress: ProgressHookType) => void) | undefined);
    create(name: string, options: SpaceCreationOptions): Promise<SpaceInfoDTO>;
    update(spaceId: string, options: SpaceUpdateOptions): Promise<SpaceInfoDTO>;
    info(spaceId: string): Promise<SpaceInfoDTO>;
    participants: {
        list: (chatId: string, options?: GetGroupParticipantsOptions) => Promise<{
            members: SpaceMemberProfile[];
        }>;
        count: (chatId: string) => Promise<GroupParticipantCounts>;
        status: (chatId: string, accountId: string) => Promise<SpaceParticipantStatus>;
    };
    permissions(spaceId: string): Promise<SpaceAccess>;
    add(spaceId: string, options: ManageSpaceOptions): Promise<SpaceInfoDTO>;
    remove(spaceId: string, options: RemoveFromSpaceOptions): Promise<SpaceInfoDTO>;
    modify(spaceId: string, options: ManageSpaceOptions): Promise<SpaceInfoDTO>;
    join(spaceId: string): Promise<SpaceInfoDTO>;
    leave(spaceId: string): Promise<SpaceInfoDTO>;
    search(term: string, options?: SpaceQueryOptions): Promise<SpaceInfoDTO[]>;
    trending(options?: SpaceQueryOptions): Promise<SpaceIFeeds[]>;
    list(type: SpaceListType, options?: {
        /**
         * @default 1
         */
        page?: number;
        limit?: number;
        overrideAccount?: string;
    }): Promise<IFeeds[]>;
    accept(spaceId: string): Promise<string>;
    reject(spaceId: string): Promise<void>;
    get chat(): {
        send: (recipient: string, options: Message) => Promise<MessageWithCID>;
        decrypt: (messages: IMessageIPFS[]) => Promise<IMessageIPFS[]>;
        latest: (target: string) => Promise<{}>;
        history: (target: string, options?: {
            reference?: string | null;
            limit?: number;
        }) => Promise<any[]>;
    };
    initialize(options: SpaceInitializeOptions): Promise<SpaceV2>;
}
