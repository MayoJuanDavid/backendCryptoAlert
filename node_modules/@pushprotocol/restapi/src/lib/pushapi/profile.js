"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Profile = void 0;
const tslib_1 = require("tslib");
const PUSH_USER = require("../user");
const PushAPI_1 = require("./PushAPI");
class Profile {
    constructor(account, env, cache, decryptedPgpPvtKey, progressHook) {
        this.account = account;
        this.env = env;
        this.cache = cache;
        this.decryptedPgpPvtKey = decryptedPgpPvtKey;
        this.progressHook = progressHook;
    }
    info(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const accountToUse = (options === null || options === void 0 ? void 0 : options.overrideAccount) || this.account;
            const cacheKey = `profile-${accountToUse}`;
            // Check if the profile is already in the cache
            if (this.cache.has(cacheKey)) {
                return this.cache.get(cacheKey);
            }
            // If not in cache, fetch from API
            const response = yield PUSH_USER.get({
                account: accountToUse,
                env: this.env,
            });
            // Cache the profile data
            this.cache.set(cacheKey, response.profile);
            return response.profile;
        });
    }
    update(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.decryptedPgpPvtKey) {
                throw new Error(PushAPI_1.PushAPI.ensureSignerMessage());
            }
            const { name, desc, picture } = options;
            const response = yield PUSH_USER.profile.update({
                pgpPrivateKey: this.decryptedPgpPvtKey,
                account: this.account,
                profile: { name, desc, picture },
                env: this.env,
                progressHook: this.progressHook,
            });
            const cacheKey = `profile-${this.account}`;
            this.cache.delete(cacheKey);
            return response.profile;
        });
    }
}
exports.Profile = Profile;
//# sourceMappingURL=profile.js.map