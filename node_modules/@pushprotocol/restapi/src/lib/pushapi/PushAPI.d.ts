import { ENV } from '../constants';
import { SignerType } from '../types';
import { InfoOptions, PushAPIInitializeProps } from './pushAPITypes';
import { Chat } from './chat';
import { Profile } from './profile';
import { Encryption } from './encryption';
import { PushStream, StreamType } from '../pushstream/PushStream';
import { Channel } from '../pushNotification/channel';
import { Notification } from '../pushNotification/notification';
import { PushStreamInitializeProps } from '../pushstream/pushStreamTypes';
import { Space } from './space';
import { Video } from './video';
export declare class PushAPI {
    signer?: SignerType;
    private readMode;
    private alpha;
    account: string;
    chainWiseAccount: string;
    decryptedPgpPvtKey?: string;
    pgpPublicKey?: string;
    env: ENV;
    private progressHook?;
    private cache;
    chat: Chat;
    space: Space;
    video: Video;
    profile: Profile;
    encryption: Encryption;
    private user;
    stream: PushStream;
    channel: Channel;
    notification: Notification;
    uid: string;
    errors: {
        type: 'WARN' | 'ERROR';
        message: string;
    }[];
    private constructor();
    static initialize(signer?: SignerType | null, options?: PushAPIInitializeProps): Promise<PushAPI>;
    static initialize(options?: PushAPIInitializeProps): Promise<PushAPI>;
    /**
     * This method is used to reinitialize the PushAPI instance
     * @notice - This method should only be used for fresh start of NFT accounts
     * @notice - All data will be lost after reinitialization
     */
    reinitialize(options: {
        versionMeta: {
            NFTPGP_V1: {
                password: string;
            };
        };
    }): Promise<void>;
    initStream(listen: StreamType[], options?: PushStreamInitializeProps): Promise<PushStream>;
    info(options?: InfoOptions): Promise<import("../types").IUser>;
    readmode(): boolean;
    static ensureSignerMessage(): string;
}
