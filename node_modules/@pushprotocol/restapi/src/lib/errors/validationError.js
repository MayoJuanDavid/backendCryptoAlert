"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleError = exports.isErrorWithResponseV2 = exports.isErrorWithResponse = exports.ValidationError = void 0;
const httpStatus_1 = require("./httpStatus");
class ValidationError extends Error {
    constructor(status, errorCode, message, details) {
        super(message);
        this.name = 'ValidationError';
        this.status = status;
        this.errorCode = errorCode;
        this.details = details;
    }
    format() {
        return {
            status: this.status,
            errorCode: this.errorCode,
            message: this.message,
            details: this.details,
            timestamp: new Date().toISOString(),
        };
    }
}
exports.ValidationError = ValidationError;
function isErrorWithResponse(error) {
    return (typeof error === 'object' &&
        error !== null &&
        'response' in error &&
        typeof error.response === 'object' &&
        error.response !== null &&
        'status' in error.response &&
        'data' in error.response &&
        typeof error.response.data === 'object' &&
        'status' in error.response.data &&
        'errorCode' in error.response.data &&
        'message' in error.response.data &&
        'details' in error.response.data &&
        'timestamp' in error.response.data);
}
exports.isErrorWithResponse = isErrorWithResponse;
function isErrorWithResponseV2(error) {
    return (typeof error === 'object' &&
        error !== null &&
        'response' in error &&
        typeof error.response === 'object' &&
        error.response !== null &&
        'status' in error.response &&
        'data' in error.response &&
        typeof error.response.data === 'object' &&
        'error' in error.response.data &&
        'message' in error.response.data &&
        'validation' in error.response.data);
}
exports.isErrorWithResponseV2 = isErrorWithResponseV2;
function handleError(error, context) {
    var _a, _b, _c;
    let status = httpStatus_1.HttpStatus.InternalError;
    let errorCode = '00000000000';
    let message = 'An unexpected error occurred. Please contact support or try again later.';
    let details = '';
    if (isErrorWithResponse(error)) {
        status = ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) || httpStatus_1.HttpStatus.InternalError;
        if ((_b = error.response) === null || _b === void 0 ? void 0 : _b.data) {
            const errData = error.response.data;
            errorCode = errData.errorCode || errorCode;
            message = errData.message || message;
            details = errData.details || JSON.stringify(errData);
        }
    }
    else if (isErrorWithResponseV2(error)) {
        status = ((_c = error.response) === null || _c === void 0 ? void 0 : _c.status) || httpStatus_1.HttpStatus.InternalError;
        const errData = error.response.data;
        message = errData.message || message;
        details = errData.validation || JSON.stringify(errData);
    }
    else if (error instanceof Error) {
        message = error.message;
        details = error.stack || '';
    }
    const validationError = new ValidationError(status, errorCode, message, details);
    const logPrefix = `[Error - API ${context}]`;
    console.error(`${logPrefix} ${JSON.stringify(validationError.format(), null, 2)}`);
    return validationError;
}
exports.handleError = handleError;
//# sourceMappingURL=validationError.js.map