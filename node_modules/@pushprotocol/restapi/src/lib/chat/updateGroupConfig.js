"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateGroupConfig = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../helpers");
const constants_1 = require("../constants");
const helpers_2 = require("./helpers");
const CryptoJS = require("crypto-js");
const axiosUtil_1 = require("../utils/axiosUtil");
const validationError_1 = require("../errors/validationError");
/**
 * Update Group Config
 */
const updateGroupConfig = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { chatId, meta, scheduleAt, scheduleEnd, status, account = null, signer = null, env = constants_1.default.ENV.PROD, pgpPrivateKey = null, } = options || {};
    try {
        /**
         * VALIDATIONS
         */
        if (account == null && signer == null) {
            throw new Error(`At least one from account or signer is necessary!`);
        }
        const wallet = (0, helpers_2.getWallet)({ account, signer });
        /**
         * CREATE PROFILE VERIFICATION PROOF
         */
        const bodyToBeHashed = {
            meta,
            scheduleAt,
            scheduleEnd,
            status,
        };
        const hash = CryptoJS.SHA256(JSON.stringify(bodyToBeHashed)).toString();
        const connectedUser = yield (0, helpers_2.getConnectedUserV2)(wallet, pgpPrivateKey, env);
        const signature = yield (0, helpers_2.sign)({
            message: hash,
            signingKey: connectedUser.privateKey,
        });
        const sigType = 'pgpv2';
        // Account is need to verify the signature at any future point
        const configVerificationProof = sigType + ':' + signature + ':' + connectedUser.did;
        /**
         * API CALL TO PUSH NODES
         */
        const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
        const apiEndpoint = `${API_BASE_URL}/v1/chat/groups/${chatId}/config`;
        const body = bodyToBeHashed;
        body.configVerificationProof = configVerificationProof;
        const response = yield (0, axiosUtil_1.axiosPut)(apiEndpoint, body);
        return response.data;
    }
    catch (err) {
        throw (0, validationError_1.handleError)(err, exports.updateGroupConfig.name);
    }
});
exports.updateGroupConfig = updateGroupConfig;
//# sourceMappingURL=updateGroupConfig.js.map